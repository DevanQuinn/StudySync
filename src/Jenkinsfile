pipeline {
    agent any
    environment {
        // Define environment-specific variables
        NODE_ENV = 'production'
    }
    options {
        timeout(time: 1, unit: 'HOURS') // Global timeout for the pipeline
        retry(3) // Retry the pipeline up to 3 times in case of a non-successful build
    }
    triggers {
        pollSCM('H */12 * * *') // Polls SCM every 12 hours
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                echo 'Deploying to Staging Environment'
                // Commands to deploy to staging environment
                // sh './deploy-staging.sh'
            }
        }
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'Deploying to Production Environment'
                // Commands to deploy to production environment
                // sh './deploy-production.sh'
            }
        }
    }
    post {
        always {
            // Actions that always happen regardless of the build result
            cleanWs() // Clean the workspace after the build completes
        }
        failure {
            // Actions to take if the pipeline fails
            echo 'The build failed.'
            mail(to: 'konger@purdue.com', subject: 'Build Failed', body: 'The Jenkins build failed.')
        }
        success {
            // Actions to take if the pipeline succeeds
            echo 'The build was successful.'
            mail(to: 'konger@purdue.com', subject: 'Build Successful', body: 'Deployment was successful.')
        }
    }
}
